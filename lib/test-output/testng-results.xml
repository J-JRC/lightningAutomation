<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="2" passed="1" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-10-04T16:11:46 EDT" name="1" finished-at="2022-10-04T16:12:39 EDT" duration-ms="52445">
    <groups>
      <group name="Example">
        <method signature="TestExample2.UID1111_testExample2()[pri:0, instance:tests.TestExample2@1e63ec0b]" name="UID1111_testExample2" class="tests.TestExample2"/>
        <method signature="TestExample2.UID1112_testExample22()[pri:0, instance:tests.TestExample2@1e63ec0b]" name="UID1112_testExample22" class="tests.TestExample2"/>
      </group> <!-- Example -->
    </groups>
    <test started-at="2022-10-04T16:11:46 EDT" name="1" finished-at="2022-10-04T16:12:39 EDT" duration-ms="52445">
      <class name="tests.TestExample2">
        <test-method is-config="true" signature="beforeSuiteAtBase(org.testng.ITestContext)[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:11:46 EDT" name="beforeSuiteAtBase" finished-at="2022-10-04T16:11:46 EDT" duration-ms="26" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@377e90b0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuiteAtBase -->
        <test-method is-config="true" signature="beforeClassAtBase(org.testng.ITestContext)[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:11:47 EDT" name="beforeClassAtBase" finished-at="2022-10-04T16:11:47 EDT" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@377e90b0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClassAtBase -->
        <test-method is-config="true" signature="beforeClassCustom()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:11:47 EDT" name="beforeClassCustom" finished-at="2022-10-04T16:11:47 EDT" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClassCustom -->
        <test-method is-config="true" signature="setupClass()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:11:47 EDT" name="setupClass" finished-at="2022-10-04T16:11:47 EDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupClass -->
        <test-method is-config="true" signature="beforeMethodAtBase(java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestResult)[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:11:47 EDT" name="beforeMethodAtBase" finished-at="2022-10-04T16:11:47 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.TestExample2.UID1111_testExample2() throws com.exception.FrameworkException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[org.testng.TestRunner@377e90b0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=TestExample2.UID1111_testExample2()[pri:0, instance:tests.TestExample2@1e63ec0b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodAtBase -->
        <test-method is-config="true" signature="beforeMethodCustom(java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestResult)[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:11:47 EDT" name="beforeMethodCustom" finished-at="2022-10-04T16:12:11 EDT" duration-ms="24657" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.TestExample2.UID1111_testExample2() throws com.exception.FrameworkException]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[org.testng.TestRunner@377e90b0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=TestExample2.UID1111_testExample2()[pri:0, instance:tests.TestExample2@1e63ec0b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodCustom -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:11 EDT" name="setup" finished-at="2022-10-04T16:12:13 EDT" duration-ms="1741" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="UID1111_testExample2()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:13 EDT" name="UID1111_testExample2" finished-at="2022-10-04T16:12:14 EDT" duration-ms="737" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UID1111_testExample2 -->
        <test-method is-config="true" signature="cleanup()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:14 EDT" name="cleanup" finished-at="2022-10-04T16:12:14 EDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanup -->
        <test-method is-config="true" signature="afterMethodCustom()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:14 EDT" name="afterMethodCustom" finished-at="2022-10-04T16:12:14 EDT" duration-ms="693" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodCustom -->
        <test-method is-config="true" signature="afterMethodAtBase()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:14 EDT" name="afterMethodAtBase" finished-at="2022-10-04T16:12:14 EDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodAtBase -->
        <test-method is-config="true" signature="beforeMethodAtBase(java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestResult)[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:14 EDT" name="beforeMethodAtBase" finished-at="2022-10-04T16:12:14 EDT" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.TestExample2.UID1112_testExample22()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[org.testng.TestRunner@377e90b0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=TestExample2.UID1112_testExample22()[pri:0, instance:tests.TestExample2@1e63ec0b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodAtBase -->
        <test-method is-config="true" signature="beforeMethodCustom(java.lang.reflect.Method,org.testng.ITestContext,org.testng.ITestResult)[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:14 EDT" name="beforeMethodCustom" finished-at="2022-10-04T16:12:38 EDT" duration-ms="23570" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.TestExample2.UID1112_testExample22()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[org.testng.TestRunner@377e90b0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=TestExample2.UID1112_testExample22()[pri:0, instance:tests.TestExample2@1e63ec0b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethodCustom -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:38 EDT" name="setup" finished-at="2022-10-04T16:12:38 EDT" duration-ms="62" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="UID1112_testExample22()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:38 EDT" name="UID1112_testExample22" finished-at="2022-10-04T16:12:38 EDT" duration-ms="48" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [2] but found [1]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [2] but found [1]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertEqualsImpl(Assert.java:149)
at org.testng.Assert.assertEquals(Assert.java:131)
at org.testng.Assert.assertEquals(Assert.java:643)
at com.assertion.BaseAssertion.shouldBeEqual(BaseAssertion.java:143)
at com.assertion.BaseAssertion.shouldBeEqual(BaseAssertion.java:116)
at tests.TestExample2.UID1112_testExample22(TestExample2.java:77)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:962)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:806)
at org.testng.TestRunner.run(TestRunner.java:601)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:433)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:427)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:387)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UID1112_testExample22 -->
        <test-method is-config="true" signature="cleanup()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:38 EDT" name="cleanup" finished-at="2022-10-04T16:12:38 EDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanup -->
        <test-method is-config="true" signature="afterMethodCustom()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:38 EDT" name="afterMethodCustom" finished-at="2022-10-04T16:12:39 EDT" duration-ms="764" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodCustom -->
        <test-method is-config="true" signature="cleanupClass()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:39 EDT" name="cleanupClass" finished-at="2022-10-04T16:12:39 EDT" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanupClass -->
        <test-method is-config="true" signature="afterMethodAtBase()[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:39 EDT" name="afterMethodAtBase" finished-at="2022-10-04T16:12:39 EDT" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethodAtBase -->
        <test-method is-config="true" signature="afterSuiteAtBase(org.testng.ITestContext)[pri:0, instance:tests.TestExample2@1e63ec0b]" started-at="2022-10-04T16:12:39 EDT" name="afterSuiteAtBase" finished-at="2022-10-04T16:12:39 EDT" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@377e90b0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuiteAtBase -->
      </class> <!-- tests.TestExample2 -->
    </test> <!-- 1 -->
  </suite> <!-- 1 -->
</testng-results>
